(function (e) { var t = { destroy: function () { var t = e(this); var n = t.data("Settings"); if (n != undefined) { n.NextPageObject.unbind("click"); n.PreviousPageObject.unbind("click"); if (n.FirstPageObject != null) { n.FirstPageObject.unbind("click") } if (n.LastPageObject != null) { n.LastPageObject.unbind("click") } t.removeData("Settings") } return t }, init: function (n) { var r = e.extend({ CurrentPage: 1, MaxPages: 1, NextPageObject: null, PreviousPageObject: null, FirstPageObject: null, OnFirst: null, LastPageObject: null, OnLast: null, BeforeNext: null, OnNext: null, AfterNext: null, BeforePrevious: null, OnPrevious: null, AfterPrevious: null, AllowEventBubbling: false, LoopPages: false, PagerTextObject: null, PagerTextFormat: "Page {currentPage} of {maxPages}" }, n); if (t.verifyJqueryObject(r, "NextPageObject") && t.verifyJqueryObject(r, "PreviousPageObject") && t.verifyFunctionExists(r, "OnNext") && t.verifyFunctionExists(r, "OnPrevious")) { return this.each(function () { if (r.CurrentPage > r.MaxPages) { r.CurrentPage = r.MaxPages } var n = e(this); n.data("Settings", r); n.data("Settings").NextPageObject.click(function () { if (t.runNextFunction(n)) { if (t.verifyFunctionExists(n.data("Settings"), "BeforeNext")) { if (n.data("Settings").BeforeNext(n.data("Settings").CurrentPage == 0 ? n.data("Settings").MaxPages : n.data("Settings").CurrentPage, n.data("Settings").CurrentPage + 1, n.data("Settings")) == false) { return n.data("Settings").AllowEventBubbling } } n.data("Settings").CurrentPage++; n.data("Settings").OnNext(n.data("Settings").CurrentPage, n.data("Settings").CurrentPage == n.data("Settings").MaxPages ? 1 : n.data("Settings").CurrentPage + 1, n.data("Settings")); t.updatePagerText(n.data("Settings")); if (t.verifyFunctionExists(n.data("Settings"), "AfterNext")) { n.data("Settings").AfterNext() } } return n.data("Settings").AllowEventBubbling }); n.data("Settings").PreviousPageObject.click(function () { if (t.runPreviousFunction(n)) { if (t.verifyFunctionExists(n.data("Settings"), "BeforePrevious")) { if (n.data("Settings").BeforePrevious(n.data("Settings").CurrentPage == n.data("Settings").MaxPages + 1 ? 1 : n.data("Settings").CurrentPage, n.data("Settings").CurrentPage - 1, n.data("Settings")) == false) { return n.data("Settings").AllowEventBubbling } } n.data("Settings").CurrentPage--; n.data("Settings").OnPrevious(n.data("Settings").CurrentPage, n.data("Settings").CurrentPage == 1 ? n.data("Settings").MaxPages : n.data("Settings").CurrentPage - 1, n.data("Settings")); t.updatePagerText(n.data("Settings")); if (t.verifyFunctionExists(n.data("Settings"), "AfterPrevious")) { n.data("Settings").AfterPrevious() } return n.data("Settings").AllowEventBubbling } return n.data("Settings").AllowEventBubbling }); t.updatePagerText(n.data("Settings")); if (t.verifyJqueryObject(n.data("Settings"), "FirstPageObject")) { n.data("Settings").FirstPageObject.click(function () { if (n.data("Settings").CurrentPage == 1) { return false } if (t.verifyFunctionExists(n.data("Settings"), "OnFirst")) { n.data("Settings").OnFirst(n.data("Settings").CurrentPage, 1, n.data("Settings")); n.data("Settings").CurrentPage = 1 } return n.data("Settings").AllowEventBubbling }) } if (t.verifyJqueryObject(n.data("Settings"), "LastPageObject")) { n.data("Settings").LastPageObject.click(function () { if (n.data("Settings").CurrentPage == n.data("Settings").MaxPages) { return false } if (t.verifyFunctionExists(n.data("Settings"), "OnLast")) { n.data("Settings").OnLast(n.data("Settings").CurrentPage, n.data("Settings").MaxPages, n.data("Settings")); n.data("Settings").CurrentPage = n.data("Settings").MaxPages } return n.data("Settings").AllowEventBubbling }) } }) } }, runNextFunction: function (e) { var t = e.data("Settings"); if (t.CurrentPage < t.MaxPages) { return true } else if (t.CurrentPage == t.MaxPages) { if (t.LoopPages) { e.data("Settings").CurrentPage = 0; return true } else { return false } } }, runPreviousFunction: function (e) { var t = e.data("Settings"); if (t.CurrentPage > 1) { return true } else if (t.CurrentPage == 1) { if (t.LoopPages) { e.data("Settings").CurrentPage = t.MaxPages + 1; return true } else { return false } } }, updatePagerText: function (e) { if (e.PagerTextObject != null && e.PagerTextObject.jquery) { e.PagerTextObject.text(e.PagerTextFormat.replace("{currentPage}", e.CurrentPage).replace("{maxPages}", e.MaxPages)) } }, verifyJqueryObject: function (e, t) { return e[t] != null && e[t].jquery }, verifyFunctionExists: function (e, t) { return e[t] != null && e[t] instanceof Function } }; e.fn.riboPager = function (n) { if (t[n]) { return t[n].apply(this, Array.prototype.slice.call(arguments, 1)) } else if (typeof n === "object" || !n) { return t.init.apply(this, arguments) } else { e.error("Method " + n + " does not exist on riboPager.") } } })(jQuery)